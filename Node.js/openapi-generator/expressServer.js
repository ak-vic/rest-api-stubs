const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const { OpenApiValidator } = require('express-openapi-validator');
const { logger } = require('./logger/logger');
const config = require('./config');
require('dotenv').config();
const authApiKeyMiddleware = require('./authApiKey');
const { ExpressOIDC } = require('@okta/oidc-middleware');
const session = require('express-session');
const request = require('request-promise');
const btoa = require('btoa');
const {joinAbsoluteUrlPath, uuidv4} = require('./common');

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());    
    //Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    const redirectUri = joinAbsoluteUrlPath(`${config.BASE_PATH}`, "authorization-code/callback");
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-doc', swaggerUI.serve, swaggerUI.setup(this.schema, false, { oauth2RedirectUrl: redirectUri }));
    this.app.post('/login', async (req, res) => {
      try {
        const clientId = req.body.client_id;
        const clientSecret = req.body.client_secret;
        const scope = req.body.scope;
        const token = await this.getAccessTokenClientCredentialsFlow(clientId, clientSecret, scope);
        res.setHeader('Cache-Control', 'no-store');
        res.setHeader('Pragma', 'no-cache');
        res.send(token);
      }
      catch (error) {
        logger.error(error.message);
        res.status(400).send(error);
      }
      
    });
    this.app.get('/authorization-code/callback', async (req, res) => {
      try {
        const authCode = req.query.code;
        const token = await this.getAccessTokenAuthorizationCodeFlow(authCode, redirectUri); 
        res.setHeader('Cache-Control', 'no-store');
        res.setHeader('Pragma', 'no-cache');
        res.send(token);
      }
      catch (error) {
        logger.error(error.message);
        res.status(400).send(error);
      }
    });
    const oidc = new ExpressOIDC(Object.assign({
      issuer: process.env.ISSUER,
      client_id: process.env.CLIENT_ID,
      client_secret: process.env.CLIENT_SECRET,
      appBaseUrl: config.BASE_PATH,
      scope: process.env.AUTHCODE_FLOW_SCOPE,
      testing: {
        disableHttpsCheck: process.env.OKTA_TESTING_DISABLEHTTPSCHECK
      }
    }, {}));
    this.app.use(session({
      secret: 'this-should-be-very-random',
      resave: true,
      saveUninitialized: false
    }));
    this.app.use(oidc.router);
    this.app.get('/login', oidc.ensureAuthenticated(), (req, res) => {
    });     
    this.app.use(authApiKeyMiddleware);
  }
  getAccessTokenClientCredentialsFlow = async (clientId, clientSecret, scope) => {
    const authHeader = btoa(`${clientId}:${clientSecret}`);
    const auth = await request({
      uri: `${process.env.ISSUER}/v1/token`,
      json: true,
      method: "POST",
      headers: {
        authorization: `Basic ${authHeader}`,
        accept: "application/json",
        "cache-control": "no-cache"
      },
      form: {
        grant_type: "client_credentials",
        scope: scope
      }
    })
    return auth;
  }

  getAccessTokenAuthorizationCodeFlow = async (authCode, redirect_uri) => {
    const authHeader = btoa(`${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`);
    const auth = await request({
      uri: `${process.env.ISSUER}/v1/token`,
      json: true,
      method: "POST",
      headers: {
        authorization: `Basic ${authHeader}`,
        accept: "application/json",
      },
      form: {
        grant_type: "authorization_code",
        code: authCode,
        redirect_uri: redirect_uri }
    })
    return auth;
  }

  launch() {
    new OpenApiValidator({
      apiSpec: this.openApiPath,
      operationHandlers: path.join(__dirname),
      fileUploader: { dest: config.FILE_UPLOAD_PATH },
    }).install(this.app)
      .catch(e => logger.error(e))
      .then(() => {
        // eslint-disable-next-line no-unused-vars
        this.app.use((err, req, res, next) => {
          // format errors          
          res.status(err.status || 500).json({
            message: err.message || err,
            errors: err.errors || '',
          });
        });

        http.createServer(this.app).listen(this.port);
        logger.info(`Listening on port ${this.port}`);
      });
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      logger.info(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
