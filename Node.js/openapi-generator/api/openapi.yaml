openapi: 3.0.1
info:
  description: Sample Node.js Web API
  title: Test API Service
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /users:
    get:
      operationId: getUsers
      responses:
        "200":
          content:
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Success
        "401":
          $ref: '#/components/responses/UnauthorizedError'           
      summary: Get all users
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Request
        "401":
          $ref: '#/components/responses/UnauthorizedError'           
      summary: Create a user
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
  /users/{id}:
    delete:
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          description: Success
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "401":
          $ref: '#/components/responses/UnauthorizedError'           
      summary: Delete user
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
    get:
      operationId: getUserById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "401":
          $ref: '#/components/responses/UnauthorizedError'           
      summary: Get user by id
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
    put:
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "204":
          description: Success
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "401":
          $ref: '#/components/responses/UnauthorizedError'           
      summary: Update user
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
  /users/name/{name}:
    get:
      operationId: getUserByName
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          nullable: true
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "401":
          $ref: '#/components/responses/UnauthorizedError'          
      summary: Get user by name
      tags:
      - Users
      x-eov-operation-handler: controllers/UsersController
components:
  securitySchemes:
    oktaImplicitFlow:   # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
    oktaAuthorizationCodeFlow:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://dev-820238.okta.com/oauth2/default/v1/authorize
          scopes:
            gateway_api: gateway api
        authorizationCode:
          authorizationUrl: https://dev-820238.okta.com/oauth2/default/v1/authorize
          tokenUrl: https://dev-820238.okta.com/oauth2/default/v1/token
          scopes:
            openid: openid
            profile: profile
            email: email
  responses:
    UnauthorizedError:
      description: Unauthorized  
  schemas:
    User:
      additionalProperties: false
      example:
        emailConfirmed: true
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: 0
        email: email@example.com
      properties:
        id:
          format: int32
          type: integer
        name:
          maxLength: 50
          minLength: 3
          type: string
        email:
          format: email
          type: string
        created:
          format: date-time
          type: string
        emailConfirmed:
          type: boolean
      required:
      - email
      - name
      type: object
    ProblemDetails:
      additionalProperties:
        additionalProperties: false
        type: object
      properties:
        type:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
        status:
          format: int32
          nullable: true
          type: integer
        detail:
          nullable: true
          type: string
        instance:
          nullable: true
          type: string
      type: object
# Apply the security globally to all operations
security:
  - oktaImplicitFlow: []
  - oktaAuthorizationCodeFlow: 
    - openid
    - profile
    - email